// main -
/*

This package generates /src/server/data.go

*/
package main

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"strings"
)

// exists returns whether the given file or directory exists
func exists(path string) error {
	_, err := os.Stat(path)
	if err == nil {
		return nil
	}
	if os.IsNotExist(err) {
		return errors.New("You must be in the root of this project or in the /js folder")
	}
	return err
}

// ExitIfErr exits the program if there is an error
// It also prints the error
func ExitIfErr(err error) {
	if err != nil {
		fmt.Println("ERROR:", err)
		os.Exit(1)
	}
}

func main() {
	wd, err := os.Getwd()
	ExitIfErr(err)

	if strings.HasSuffix(wd, "/js") || strings.HasSuffix(wd, "/js/") {
		wd = path.Join(wd, "..")
	}

	goServer := path.Join(wd, "/src/server/")
	jsDist := path.Join(wd, "/js/dist/")

	toCheck := []string{goServer, jsDist}
	for _, check := range toCheck {
		ExitIfErr(exists(check))
	}

	fileToRead := map[string][]string{
		"js":   {path.Join(jsDist, "/main.js")},
		"css":  {path.Join(jsDist, "/main.css")},
		"tmpl": {path.Join(goServer, "/data.tmpl")},
	}
	for i, file := range fileToRead {
		data, err := ioutil.ReadFile(file[0])
		ExitIfErr(err)
		file = append(file, string(data))
		fileToRead[i] = file
	}

	tmpl := fileToRead["tmpl"][1]
	css := strings.Replace(fileToRead["css"][1], "`", "`+\"`\"+`", -1) // the replace function escapes the ` characters
	js := strings.Replace(fileToRead["js"][1], "`", "`+\"`\"+`", -1)

	tmpl = strings.Replace(tmpl, "{{ CSS }}", css, 1)
	tmpl = strings.Replace(tmpl, "{{ JS }}", js, 1)
	tmpl = "// DO NOT EDIT THIS FILE!!\n// THIS IS AN AUTOMATIC GENERATED FILE\n\n" + tmpl

	ioutil.WriteFile(path.Join(goServer, "data.go"), []byte(tmpl), 0666)
}
